import Color from 'color';
var Turtle = /** @class */ (function () {
    function Turtle(canvas) {
        this._dir = 0;
        this._x = 0;
        this._y = 0;
        this._draw = true;
        this._color = Color('#000');
        this._lineWidth = 1;
        this._origin = {
            x: 0,
            y: 0,
        };
        this.paths = [
            {
                path: new Path2D(),
                color: this.color,
                lineWidth: this.lineWidth,
            },
        ];
        this.states = [];
        this.goto = this.moveTo;
        this.moveto = this.moveTo;
        this.setpos = this.moveTo;
        this.setPosition = this.moveTo;
        this.f = this.forward;
        this.fd = this.forward;
        this.b = this.back;
        this.bk = this.back;
        this.backward = this.back;
        this.lt = this.left;
        this.rt = this.right;
        this.pd = this.pendown;
        this.down = this.pendown;
        this.pu = this.penup;
        this.up = this.penup;
        this.jmp = this.jump;
        this.seth = this.setheading;
        this._ctx = canvas.getContext('2d');
        this.x = 0;
        this.y = 0;
        this.dir = 0;
        this._height = canvas.height;
        this._width = canvas.width;
        this._origin = {
            x: 0,
            y: 0,
        };
        this._ctx.translate(0.5 * this.width, 0.5 * this.height);
        this.currentPath.moveTo(0, 0);
    }
    Turtle.prototype.setCurrentPath = function () {
        this.paths.push({
            path: new Path2D(),
            color: this.color,
            lineWidth: this.lineWidth,
        });
    };
    Object.defineProperty(Turtle.prototype, "size", {
        set: function (size) {
            this._ctx.translate((this._origin.x - 0.5) * this.width, (this._origin.y - 0.5) * this.height);
            this._width = size.width;
            this._height = size.height;
            this._ctx.translate((this._origin.x + 0.5) * this.width, (this._origin.y + 0.5) * this.height);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Turtle.prototype, "origin", {
        get: function () {
            return this._origin;
        },
        set: function (point) {
            this._ctx.translate((this._origin.x - 0.5) * this.width, (this._origin.y - 0.5) * this.height);
            this._origin = point;
            this._ctx.translate((this._origin.x + 0.5) * this.width, (this._origin.y + 0.5) * this.height);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Turtle.prototype, "current", {
        get: function () {
            return this.paths[this.paths.length - 1];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Turtle.prototype, "currentPath", {
        get: function () {
            return this.current.path;
        },
        enumerable: true,
        configurable: true
    });
    Turtle.prototype.penup = function () {
        this.draw = false;
        return this;
    };
    Turtle.prototype.pendown = function () {
        if (!this.draw) {
            this.draw = true;
            this.setCurrentPath();
        }
        return this;
    };
    Turtle.prototype.moveTo = function (x, y) {
        this.x = x;
        this.y = y;
        if (!this.draw) {
            this.currentPath.moveTo(this.x, this.y);
        }
        else {
            this.currentPath.lineTo(this.x, this.y);
        }
        return this;
    };
    Turtle.prototype.jump = function (x, y) {
        var drawing = this.draw;
        this.penup();
        this.x = x;
        this.y = y;
        if (drawing) {
            this.pendown();
        }
    };
    Turtle.prototype.forward = function (dist) {
        // vector transformation
        var x = this.x + dist * Math.cos(this.dir);
        var y = this.y + dist * Math.sin(this.dir);
        return this.moveTo(x, y);
    };
    Turtle.prototype.back = function (dist) {
        var x = this.x + dist * Math.cos(this.dir - Math.PI);
        var y = dist * Math.sin(this.dir - Math.PI);
        return this.moveTo(x, y);
    };
    Turtle.prototype.left = function (angle) {
        if (angle === void 0) { angle = 90; }
        this.dir -= angle * (Math.PI / 180);
        return this;
    };
    Turtle.prototype.right = function (angle) {
        if (angle === void 0) { angle = 90; }
        this.dir += angle * (Math.PI / 180);
        return this;
    };
    Turtle.prototype.pos = function () {
        return { y: this.x, x: this.y };
    };
    Turtle.prototype.save = function () {
        this.states.push({
            x: this.x,
            y: this.y,
            dir: this.dir,
            color: this.color.hex(),
            lineWidth: this.lineWidth,
        });
        return this;
    };
    Turtle.prototype.restore = function () {
        var state = this.states.pop();
        if (state !== undefined) {
            this.setcolor(state.color);
            this.setx(state.x);
            this.sety(state.x);
            this.setheading(state.dir);
            this.setlinewidth(state.lineWidth);
        }
        return this;
    };
    Turtle.prototype.fill = function () {
        this._ctx.fill(this.currentPath);
        return this;
    };
    Turtle.prototype.stroke = function () {
        this.clear();
        for (var _i = 0, _a = this.paths; _i < _a.length; _i++) {
            var path = _a[_i];
            this._ctx.strokeStyle = path.color.hex();
            this._ctx.lineWidth = path.lineWidth;
            this._ctx.stroke(path.path);
        }
        return this;
    };
    Turtle.prototype.setcolor = function (color) {
        this._color = Color(color);
        this.current.color = Color(color);
        return this;
    };
    Turtle.prototype.setlinewidth = function (width) {
        this.lineWidth = width;
        this.current.lineWidth = width;
        return this;
    };
    Turtle.prototype.setx = function (x) {
        this.x = x;
        return this;
    };
    Turtle.prototype.sety = function (y) {
        this.y = y;
        return this;
    };
    Object.defineProperty(Turtle.prototype, "heading", {
        get: function () {
            return this.dir;
        },
        set: function (angle) {
            this.dir = angle;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Turtle.prototype, "color", {
        get: function () {
            return this._color;
        },
        enumerable: true,
        configurable: true
    });
    Turtle.prototype.transformColor = function (callback) {
        this.setcolor(callback(this.color).hex());
        return this;
    };
    Turtle.prototype.setheading = function (angle) {
        this.dir = angle;
        return this;
    };
    Turtle.prototype.clearPaths = function () {
        this.paths = [this.paths[this.paths.length - 1]];
        return this;
    };
    Turtle.prototype.clear = function (x, y, width, height) {
        if (x === void 0) { x = 0; }
        if (y === void 0) { y = 0; }
        if (width === void 0) { width = this.width; }
        if (height === void 0) { height = this.height; }
        this._ctx.translate(-(this._origin.x + 0.5) * this.width, -(this._origin.y + 0.5) * this.height);
        this._ctx.clearRect(x, y, width, height);
        this._ctx.translate((this._origin.x + 0.5) * this.width, (this._origin.y + 0.5) * this.height);
        return this;
    };
    Turtle.prototype.home = function () {
        this.x = this.width / 2;
        this.y = this.height / 2;
        this.dir = 0;
        return this;
    };
    Turtle.prototype.toradians = function (angle) {
        return angle * ((Math.PI * 2) / 360);
    };
    Turtle.prototype.circle = function (radius, extent, steps) {
        if (extent === void 0) { extent = 360; }
        if (!extent) {
            extent = 360;
        }
        extent = this.toradians(extent);
        if (!steps) {
            steps = Math.round(Math.abs(radius * extent * 8)) | 0;
            steps = Math.max(steps, 4);
        }
        var cx = this.x + radius * Math.cos(this.dir + Math.PI / 2);
        var cy = this.y + radius * Math.sin(this.dir + Math.PI / 2);
        var a1 = Math.atan2(this.y - cy, this.x - cx);
        var a2 = radius >= 0 ? a1 + extent : a1 - extent;
        for (var i = 0; i < steps; i++) {
            var p = i / (steps - 1);
            var a = a1 + (a2 - a1) * p;
            var x = cx + Math.abs(radius) * Math.cos(a);
            var y = cy + Math.abs(radius) * Math.sin(a);
            this.goto(x, y);
        }
        if (radius >= 0) {
            this.dir += extent;
        }
        else {
            this.dir -= extent;
        }
        return this;
    };
    Object.defineProperty(Turtle.prototype, "width", {
        get: function () {
            return this._width;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Turtle.prototype, "height", {
        get: function () {
            return this._height;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Turtle.prototype, "dir", {
        get: function () {
            return this._dir;
        },
        set: function (dir) {
            this._dir = dir;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Turtle.prototype, "lineWidth", {
        get: function () {
            return this._lineWidth;
        },
        set: function (lineWidth) {
            this._lineWidth = lineWidth;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Turtle.prototype, "draw", {
        get: function () {
            return this._draw;
        },
        set: function (draw) {
            this._draw = draw;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Turtle.prototype, "x", {
        get: function () {
            return this._x;
        },
        set: function (x) {
            this._x = x;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Turtle.prototype, "y", {
        get: function () {
            return this._y;
        },
        set: function (y) {
            this._y = y;
        },
        enumerable: true,
        configurable: true
    });
    return Turtle;
}());
export default Turtle;
