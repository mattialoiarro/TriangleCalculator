import Color from 'color';
declare class Turtle {
    private _dir;
    private _x;
    private _y;
    private _draw;
    private _color;
    private _lineWidth;
    private _height;
    private _width;
    private _origin;
    private paths;
    private states;
    private _ctx;
    constructor(canvas: HTMLCanvasElement);
    setCurrentPath(): void;
    size: {
        width: number;
        height: number;
    };
    origin: {
        x: number;
        y: number;
    };
    readonly current: {
        path: Path2D;
        color: Color;
        lineWidth: number;
    };
    readonly currentPath: Path2D;
    penup(): this;
    pendown(): this;
    moveTo(x: number, y: number): this;
    jump(x: number, y: number): void;
    forward(dist: number): this;
    back(dist: number): this;
    left(angle?: number): this;
    right(angle?: number): this;
    pos(): {
        y: number;
        x: number;
    };
    save(): this;
    restore(): this;
    fill(): this;
    stroke(): this;
    setcolor(color: string): this;
    setlinewidth(width: number): this;
    setx(x: number): this;
    sety(y: number): this;
    heading: number;
    readonly color: Color;
    transformColor(callback: (color: Color) => Color): this;
    setheading(angle: number): this;
    clearPaths(): this;
    clear(x?: number, y?: number, width?: number, height?: number): this;
    home(): this;
    toradians(angle: number): number;
    circle(radius: number, extent: number | undefined, steps: number): this;
    readonly width: number;
    readonly height: number;
    dir: number;
    lineWidth: number;
    draw: boolean;
    x: number;
    y: number;
    goto: (x: number, y: number) => this;
    moveto: (x: number, y: number) => this;
    setpos: (x: number, y: number) => this;
    setPosition: (x: number, y: number) => this;
    f: (dist: number) => this;
    fd: (dist: number) => this;
    b: (dist: number) => this;
    bk: (dist: number) => this;
    backward: (dist: number) => this;
    lt: (angle?: number) => this;
    rt: (angle?: number) => this;
    pd: () => this;
    down: () => this;
    pu: () => this;
    up: () => this;
    jmp: (x: number, y: number) => void;
    seth: (angle: number) => this;
}
export default Turtle;
